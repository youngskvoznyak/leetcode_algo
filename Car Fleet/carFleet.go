package main

import "sort"

func main() {

}

//Используйте подход, основанный на стеке, чтобы определить количество автопарков,
// которые прибудут в пункт назначения.
// Начните с сортировки автомобилей по их расположению в порядке убывания.
// Затем просмотрите отсортированные автомобили и рассчитайте время, необходимое каждому автомобилю, чтобы добраться до конечного пункта назначения.
// Если вычисленное время больше времени парка автомобилей в верхней части стека (или если стек пуст), мы добавляем это время в стек, чтобы представить новый парк автомобилей.
// Наконец, верните количество автопарков, которое является длиной стека.

func carFleet(target int, position []int, speed []int) int {
	// создайте массив пар, чтобы отсортировать его
	// и не потерять взаимосвязь между скоростью и положением
	pairs := make([][2]int, len(position))

	for i := range pairs {
		pairs[i][0] = position[i]
		pairs[i][1] = speed[i]
	}
	// сортировка по расстоянию от цели
	// от самого близкого к самому дальнему
	sort.Slice(pairs, func(i, j int) bool {
		return pairs[i][0] > pairs[j][0]
	})

	stack := make([]float64, 0, len(position))

	for i := range pairs {
		currentTime := float64(target-pairs[i][0]) / float64(pairs[i][1])

		if len(stack) == 0 || currentTime > stack[len(stack)-1] {
			stack = append(stack, currentTime)
		}
	}
	return len(stack)
}
